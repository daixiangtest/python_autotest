{"name": "部署项目sui_defi", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'Modules' in 'Projects\\nMiddleware\\nDocs\\nEthereum Mainnet\\n0x156...e010\\nProjects/Contract_sui_defi_z/Deploy\\nContract\\nVersion\\n1\\nName\\nDeFi\\nNetwork / Chain\\nChain\\nSui\\nNetwork\\nTestnet\\nDeploy'", "trace": "self = <hamster_test.test_cases.test_contract.test_contract_sui.TestSui object at 0x0000019BE5B30B80>\ncase = {'case_data': 'Contract_sui_defi_z', 'case_id': 2, 'case_title': ['创建项目sui_defi', '检查项目sui_defi', '构建项目sui_defi', '部署项...', '删除项目sui_defi'], 'text': {'tx1': 'View Full Log', 'tx2': 'Successful', 'tx3': 'Download ABI', 'tx4': 'Deploy', ...}}\nconnect_db = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f9368c8078fdca33980fec214b7d25d9\")>\n\n    @allure.suite('sui生态部署合约')\n    @allure.description(\"sui生态部署合约\")\n    @pytest.mark.parametrize('case', cases, ids=ids3)\n    def test_deploy(self, case, connect_db):\n        allure.dynamic.title(case['case_title'][3])\n        allure.attach(body=get_ini_data('url', 'get_url'), name='请求路径')\n        cp = CreateProject(connect_db)\n        cp.geturl(get_ini_data('url', 'get_url'))  # 输入项目地址\n        cp.driver.implicitly_wait(15)\n        lens = len(get_yaml_data(DATA_SUI))\n        # 登录项目\n        cp.longin(get_ini_data('github', 'user'), get_ini_data('github', 'passwd'))\n        # 点击项目详情按钮\n        cp.contract_projects(case['case_data'], lens)\n        # 点击deploy按钮\n        cp.click(10, *em.projects_deploy)\n        # 选择部署的网络\n        cp.deploy_evm(1, 2)\n        time.sleep(3)\n        # 操作钱包交易\n        windows = connect_db.window_handles\n        print(windows)\n        # 判断弹窗有没有成功开启\n        if len(windows) == 1:\n            print(\"选择的网络错误\")\n            get_picture(connect_db, case['case_title'][3])  # 失败截图\n            logger.error(\"测试编号:{},测试标题:{},执行失败!实际结果:{}\".format(case['case_id'], case['case_title'][3],\n                                                                               \"请手动切换网络\"))\n            raise Exception\n        cp.window(1)\n        cp.send_keys(10, *em.sui_password, \"Dx3826729\")\n        cp.click(10, *em.sui_unlock)\n        cp.clicks(20, *em.sui_approve)\n        time.sleep(15)\n        cp.window(-1)\n        tx = cp.text(20, *em.ops_projects)\n        new_url = connect_db.current_url\n    \n        try:\n            assert case['text']['tx5'] in tx\n            assert get_ini_data('url', 'new_url') in new_url\n            logger.info(\"测试编号:{},测试标题:{},执行成功！\".format(case['case_id'], case['case_title'][3]))\n        except AssertionError as e:\n            get_picture(connect_db, case['case_title'][3])  # 失败截图\n            logger.error(\n                \"测试编号:{},测试标题:{},执行失败!实际结果:{}\".format(case['case_id'], case['case_title'][3], e))\n            logger.exception(e)\n>           raise e\n\ntest_cases\\test_contract\\test_contract_sui.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <hamster_test.test_cases.test_contract.test_contract_sui.TestSui object at 0x0000019BE5B30B80>\ncase = {'case_data': 'Contract_sui_defi_z', 'case_id': 2, 'case_title': ['创建项目sui_defi', '检查项目sui_defi', '构建项目sui_defi', '部署项...', '删除项目sui_defi'], 'text': {'tx1': 'View Full Log', 'tx2': 'Successful', 'tx3': 'Download ABI', 'tx4': 'Deploy', ...}}\nconnect_db = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f9368c8078fdca33980fec214b7d25d9\")>\n\n    @allure.suite('sui生态部署合约')\n    @allure.description(\"sui生态部署合约\")\n    @pytest.mark.parametrize('case', cases, ids=ids3)\n    def test_deploy(self, case, connect_db):\n        allure.dynamic.title(case['case_title'][3])\n        allure.attach(body=get_ini_data('url', 'get_url'), name='请求路径')\n        cp = CreateProject(connect_db)\n        cp.geturl(get_ini_data('url', 'get_url'))  # 输入项目地址\n        cp.driver.implicitly_wait(15)\n        lens = len(get_yaml_data(DATA_SUI))\n        # 登录项目\n        cp.longin(get_ini_data('github', 'user'), get_ini_data('github', 'passwd'))\n        # 点击项目详情按钮\n        cp.contract_projects(case['case_data'], lens)\n        # 点击deploy按钮\n        cp.click(10, *em.projects_deploy)\n        # 选择部署的网络\n        cp.deploy_evm(1, 2)\n        time.sleep(3)\n        # 操作钱包交易\n        windows = connect_db.window_handles\n        print(windows)\n        # 判断弹窗有没有成功开启\n        if len(windows) == 1:\n            print(\"选择的网络错误\")\n            get_picture(connect_db, case['case_title'][3])  # 失败截图\n            logger.error(\"测试编号:{},测试标题:{},执行失败!实际结果:{}\".format(case['case_id'], case['case_title'][3],\n                                                                               \"请手动切换网络\"))\n            raise Exception\n        cp.window(1)\n        cp.send_keys(10, *em.sui_password, \"Dx3826729\")\n        cp.click(10, *em.sui_unlock)\n        cp.clicks(20, *em.sui_approve)\n        time.sleep(15)\n        cp.window(-1)\n        tx = cp.text(20, *em.ops_projects)\n        new_url = connect_db.current_url\n    \n        try:\n>           assert case['text']['tx5'] in tx\nE           AssertionError: assert 'Modules' in 'Projects\\nMiddleware\\nDocs\\nEthereum Mainnet\\n0x156...e010\\nProjects/Contract_sui_defi_z/Deploy\\nContract\\nVersion\\n1\\nName\\nDeFi\\nNetwork / Chain\\nChain\\nSui\\nNetwork\\nTestnet\\nDeploy'\n\ntest_cases\\test_contract\\test_contract_sui.py:185: AssertionError"}, "description": "sui生态部署合约", "attachments": [{"name": "请求路径", "source": "36995e2b-429d-4e78-9a7e-e8eddc783d76-attachment.attach"}, {"name": "image", "source": "8dee27da-680e-4182-83d7-183ff04dc679-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "13a3b7f9-e1a5-425e-8fa9-4edccf0fdd27-attachment.html", "type": "text/html"}, {"name": "log", "source": "4538b6d3-b41d-4279-b57b-636fc9fa46c0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'case_id': 2, 'case_title': ['创建项目sui_defi', '检查项目sui_defi', '构建项目sui_defi', '部署项目sui_defi', '删除项目sui_defi'], 'case_data': 'Contract_sui_defi_z', 'text': {'tx1': 'View Full Log', 'tx2': 'Successful', 'tx3': 'Download ABI', 'tx4': 'Deploy', 'tx5': 'Modules'}}"}], "start": 1692276965414, "stop": 1692277008983, "uuid": "c6cdb307-2d13-4792-87f4-57b21ff90870", "historyId": "5797fd3550055efc69b90754b872915d", "testCaseId": "204b7b622bde8d95b1077eed323579bc", "fullName": "test_cases.test_contract.test_contract_sui.TestSui#test_deploy", "labels": [{"name": "parentSuite", "value": "sui项目合约"}, {"name": "feature", "value": "sui项目合约"}, {"name": "suite", "value": "sui生态部署合约"}, {"name": "epic", "value": "hamster系统"}, {"name": "subSuite", "value": "TestSui"}, {"name": "host", "value": "LAPTOP-UIN85NG6"}, {"name": "thread", "value": "13272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_contract.test_contract_sui"}]}